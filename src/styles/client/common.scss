@import "_import";

html {
  box-sizing: border-box;
  @include mapPositionWithCoordinate(relative);
  @extend %maxViewWidth;
}

a {
  @include getLinkCSS();
  @include getFontFamily(sans-serif);
}
div {
  outline: none;
}

p {
  padding: 0;
  margin: 0;
}

blockquote {
  overflow: hidden;
  padding-right: 1.5em;
  padding-left: 1.5em;
  margin-left: 0;
  margin-right: 0;
  font-style: italic;
  border-left: 5px solid $blurColor;
}

textarea,
input {
  border: none;
  outline: none;
  @include getTransition(fast);
}

ul {
  padding: 0;
  list-style: none;
}

button {
  height: fit-content;
  @include contrastView(blur);
  padding: 0;
  font-size: map-get($font-size, md);
  @include getTransition(fast);
  text-transform: none;
  border: 0;
  outline: none;
  cursor: pointer;

  &.raised {
    @include getElevation(1);
  }

  &:active {
    transition: 0.1s;
    transform: scale(0.96);
  }
}

button.btn-awesome {
  @include getDimension(100%, 36px, true);
  @include displayFlexWithProperty($jc: center, $ai: center);
  font-size: map-get($font-size, sm);
  @include contrastView(daken);
  text-transform: uppercase;
  &:hover {
    @include getElevation(3);
  }

  &.block {
    border-radius: 0;
  }

  &.primary {
    @include mapColorWithBackground(
      $lightColor,
      #ee7560 linear-gradient(90deg, #ee7560, #ff5858)
    );
  }

  & i {
    margin-left: 4px;
    @include getTransition(fast);
  }
  &:hover i {
    margin-left: 8px;
  }
}

button.btn-awesome-outline {
  padding: 13px 17px;
  line-height: 12px;
  border-radius: 4px;
  border: 1px solid $blurColor;
  @include mapColorWithBackground($blurColor, transparent);

  &:hover {
    @include mapColorWithBackground($lightColor, $blurColor);
  }

  &.primary {
    color: $primaryColor;
    border-color: $primaryColor;

    &:hover {
      @include mapColorWithBackground($lightColor, $primaryColor);
    }
  }
}

.awesome-input {
  display: flex;

  & .btn {
    position: relative;
    @include getDimension(40px, 40px);
    @include displayFlexWithProperty($ai: center, $jc: center);
    @include contrastView(daken);
    border-radius: 40px 0 0 40px;
    font-size: map-get($font-size, xs);
    @include getTransition(fast);
    cursor: pointer;

    &:hover {
      background-color: $primaryColor;
    }
    &.btn-ascend {
      border-radius: 0 40px 40px 0;
    }
  }

  & input {
    @include getFlexWidthGrow();
    padding: 0 20px;
    background-color: lighten($greyColor, 30%);
    font-size: map-get($font-size, xs);
    text-align: center;
  }
}

.base-carousel-item {
  @include getTransition(fast);
}

.widget-wrapper-hightlight {
  width: 100%;

  &::before {
    content: "";
    width: calc(0.3333333 * 100vw);
    height: 100%;
    position: absolute;
    top: 0;
    @include contrastView(widget);
    @include xs {
      opacity: 0;
    }
  }
  &.hidden-md-down::before {
    @include md {
      opacity: 0;
    }
  }

  &.container.container-3::before {
    width: calc((100vw - 1280px) / 2 + (0.25 * 1280px));
  }
  &.container.container-4::before {
    width: calc((100vw - 1280px) / 2 + (0.3333333 * 1280px));
  }
  &.right::before {
    right: 0;
  }
}

.widget-wrapper {
  z-index: 2;
  @include contrastView(widget);

  &.transparent {
    @include contrastView(transparent);
  }

  padding-bottom: 42px;

  &.right .widget {
    padding: 42px 32px 0 32px;

    @include xs {
      padding: 36px 10% 0 32px;
    }
  }

  & .widget {
    padding: 42px 32px 0 32px;

    @include xs {
      padding: 36px 32px 0 10%;
    }

    & .title {
      @extend %h3;
      text-transform: uppercase;
      margin-bottom: 16px;
    }

    & .content {
      padding-left: 12px;

      & .tags {
        width: 100%;
        @include getFont(sm, 500);

        & .skeleton {
          @extend %tag-spacing;
          display: inline-block;
          @include getDimension(128px, 32px, true);
        }

        & .MuiChip-root {
          @extend %chipOutline;
        }
      }

      & .search {
        position: relative;

        & .search-icon {
          font-size: map-get($font-size, sm);
          @include mapPositionWithCoordinate(absolute, 50%, calc(100% - 27px));
          transform: translateY(-50%);
          @include getFont(lighten($blackColor, 35%), 600);
        }

        & input {
          padding: 0 40px 0 20px;
          @include getDimension(100%, 40px, $round: true);
          border: 1px solid lighten($blurColor, 10%);
          @include contrastView(light);

          &::placeholder {
            color: $blurColor;
          }

          &:focus {
            border-color: $primaryColor;

            & ~ .search-icon {
              color: $primaryColor;
            }
          }
        }
      }
    }

    & .filter-wrapper {
      text-align: right;

      & label {
        color: $secondaryColor;
      }
    }
  }
}

.loading-filter {
  @include mapPositionWithCoordinate(sticky, 0, calc(100vw - 64px));
  @include getDimension(30px, 30px, true);
  background-color: #fff;
  z-index: 100;
  transform: translateY(36px);
  @include getTransition(fast);

  &.left {
    left: 0px;
  }
}

@each $label, $element in $breakpoint-wrappers {
  @if ($label == null) {
    @each $className, $mapProperty in $element {
      .#{$className} {
        @each $property, $value in $mapProperty {
          #{$property}: #{$value};
        }
      }
    }
  } @else {
    @media #{inspect(map-get($breakpoints, $label))} {
      @each $className, $mapProperty in $element {
        .#{$className}-#{$label} {
          @each $property, $value in $mapProperty {
            #{$property}: #{$value};
          }
        }
      }
    }
  }
}

.badge-root {
  display: inline-flex;
  position: relative;
  flex-shrink: 0;
  vertical-align: middle;

  .badge {
    padding: 0 6px;
    font-size: 0.75rem;
    min-width: 20px;
    @include getDimension(auto, 20px, true);
    @include displayFlexWithProperty($fw: wrap, $ai: center, $jc: center);
    @include mapPositionWithCoordinate(absolute, 0, 0);
  }
}

.alert {
  @include displayFlexWithProperty($ai: center);
  width: 100%;
  padding: 12px 24px;

  .alert-icon {
    font-size: 18px;
    margin-right: 14px;
  }

  .alert-content {
    @include displayFlexWithProperty($ai: center);
    width: 0;
    flex-grow: 1;
    
    .alert-title {
      font-size: 1rem;
      font-weight: bold;
    }
  }
}
